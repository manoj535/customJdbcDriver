package customJDBC;

import java.io.StringReader;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;

/**
 * Implements java.sql.Statement Implements executeQuery method to customize the
 * query
 */
public class StatementImpl implements java.sql.Statement {

    Statement customStatement;

    StatementImpl(Statement statement) {
        customStatement = statement;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return customStatement.isWrapperFor(iface);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return customStatement.unwrap(iface);
    }

    @Override
    public void addBatch(String sql) throws SQLException {

        customStatement.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {

        customStatement.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {

        customStatement.clearBatch();
    }

    @Override
    public void clearWarnings() throws SQLException {

        customStatement.clearWarnings();
    }

    @Override
    public void close() throws SQLException {

        customStatement.close();
    }

    @Override
    public void closeOnCompletion() throws SQLException {

        customStatement.closeOnCompletion();
    }

    @Override
    public boolean execute(String sql) throws SQLException {

        return customStatement.execute(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return customStatement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return customStatement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return customStatement.execute(sql, columnNames);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return customStatement.executeBatch();
    }

    /**
     * customizes the given query if it is a select statement with 'user' table
     */
    @Override
    public ResultSet executeQuery(String inputSql) throws SQLException {

        System.out.println("executeQuery");

        return customStatement.executeQuery(resultSql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return customStatement.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return customStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return customStatement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return customStatement.executeUpdate(sql, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return customStatement.getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return customStatement.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return customStatement.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return customStatement.getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return customStatement.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return customStatement.getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return customStatement.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return customStatement.getMoreResults(current);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return customStatement.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return customStatement.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return customStatement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return customStatement.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return customStatement.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return customStatement.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return customStatement.getWarnings();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return customStatement.isCloseOnCompletion();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return customStatement.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return customStatement.isPoolable();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        customStatement.setCursorName(name);

    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {

        customStatement.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {

        customStatement.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        customStatement.setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {

        customStatement.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {

        customStatement.setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {

        customStatement.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        customStatement.setQueryTimeout(seconds);
    }

}
